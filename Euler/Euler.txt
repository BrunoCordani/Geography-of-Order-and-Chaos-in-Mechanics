# The Euler Problem of the two Fixed Centers
# S. Codegoni and B. Cordani
# Dip. Matematica - via Saldini 50
# 20133 - Milano (Italy)
# bruno.cordani@unimi.it
# 
> restart:
# The Euler problem consists in finding the motion of a particle in a plane subject to the gravitational attraction of two fixed masses: the primary, with mass = 1 and lying in the origin of the Cartesian coordinates, and the secondary, with mass = m and lying in the point (0,2). We use the method of the separation of variables in the Hamilton-Jacobi equation written in elliptic-hyperbolic coordinates.  The problem is so reduced to the quadratures, i.e., to performing some integrals. In the present case, the involved integrals are the elliptic ones of the first kind, and the central question is to reduce them to the canonical form of Legendre. 
# First of all we must define the initial position of the moving particle giving, in Cartesian coordinates, its position x and y, its initial velocity v[X] and v[Y], the value, between 0 and 1, of the second mass m  (the limit values are allowed: for m = 0 one obtains the limit case of the Kepler problem). For a better graphical result the parameter n (dot density) may be increased. The evolutive parameter tau varies in (0,delta): increasing delta more revolutions are calculated. Be aware of the fact that with some initial conditions (for example y = 1) the program reports error, since the limit cases of multiple roots in the integrand can not be treated: notice however that the integrals involved in this limiting cases are elementary. Another cause of error arises from choosing an initial value of x that is too small, since MAPLE fails to solve a numerical equation: fix the problem by increasing the Digits parameter, which determines the digit number used by MAPLE. When the total energy H is greater than zero, the orbits are not periodic and the parameter delta must be choosen not too great: proceed by trials. Sometimes the orbit may "rebound" on the y-axis: try to fix the problem by increasing the Digits parameter, but take into account that the problem is "structural", since x is defined as a sqare root -- thus it is always positive -- and the procedure for fixing the error does not always work correctly.
# 
# Choose the initial conditions.
> x:=1 :y:=0  :v[X]:=0  :v[Y]:=1.2:  m:=0.5  :n:=100 :delta:=50 :Digits:=10:
# With the following one calculates the initial values of the elliptic coordinates and relative canonical momenta.
> xi1:=evalf(1/2*(sqrt(x^2+y^2)+sqrt(x^2+(y-2)^2))):
> eta1:=evalf(1/2*(sqrt(x^2+y^2)-sqrt(x^2+(y-2)^2))):
> v[XI]:=evalf(1/2*((x*v[X]+y*v[Y])/(sqrt(x^2+y^2))+(x*v[X]+(y-2)*v[Y])/sqrt(x^2+(y-2)^2))):
> v[ETA]:=evalf(1/2*((x*v[X]+y*v[Y])/(sqrt(x^2+y^2))-(x*v[X]+(y-2)*v[Y])/sqrt(x^2+(y-2)^2))):
> p[XI]:=(xi1^2-eta1^2)/(xi1^2-1)*v[XI]:
> p[ETA]:=(xi1^2-eta1^2)/(1-eta1^2)*v[ETA]:
# Let us calculate the two first integrals of the motion H and gamma (minus alpha1 in the code). 
> H:=evalf(1/2*1/(xi1^2-eta1^2)*((xi1^2-1)*p[XI]^2+(1-eta1^2)*p[ETA]^2)+(eta1*(1-m)-xi1*(1+m))/(xi1^2-eta1^2)):
> alpha1:=evalf(eta1^2*H+1/2*(1-eta1^2)*p[ETA]^2+eta1*(1-m)):
# Let us consider the polynomial of the fourth degree in xi. Its roots are
> xi[1]:=-1:xi[2]:=1:xi[3]:=evalf((-(1+m)+sqrt((1+m)^2+4*H*alpha1))/(2*H)):xi[4]:=evalf((-(1+m)-sqrt((1+m)^2+4*H*alpha1))/(2*H)):
# To reduce it to the Legendre normal form the roots must not interlace. On the contrary case we must consider the two polynomials S1 and S2 obtained as products of the bynomials with non interlacing roots.
> INTER1:=sort([xi[1],xi[2],xi[3],xi[4]]):
> S1:=expand((xi-INTER1[1])*(xi-INTER1[2])):
> S2:=expand(H*(xi-INTER1[3])*(xi-INTER1[4])):
# Let us consider the coefficients of these polynomials and calculate the following constants, which are necessary for the transformations reducing the elliptic integral . We follow the method exposed in the books:
# -- Whittaker & Watson, A course in modern analysis, Cambridge University Press (1952), Chapter XXII, Section 22.7,
# -- Bowman, Introducion to elliptic functions with applications, Dover (1961), Chapter IX.
> a1:=coeff(S1,xi,2): b1:=coeff(S1,xi,1)/2: c1:=coeff(S1,xi,0):
> a2:=coeff(S2,xi,2): b2:=coeff(S2,xi,1)/2: c2:=coeff(S2,xi,0):
> L1:=(-(a1*c2+a2*c1-2*b1*b2)+sqrt((a1*c2+a2*c1-2*b1*b2)^2-4*(b2^2-a2*c2)*(b1^2-a1*c1)))/(2*(b2^2-a2*c2)):
> L2:=(-(a1*c2+a2*c1-2*b1*b2)-sqrt((a1*c2+a2*c1-2*b1*b2)^2-4*(b2^2-a2*c2)*(b1^2-a1*c1)))/(2*(b2^2-a2*c2)):
> alpha:=(L1*b2-b1)/(a1-L1*a2):
> beta:=(L2*b2-b1)/(a1-L2*a2):
> A1:=L1*(L1*a2-a1)/(L1-L2)+a1-L1*a2:
> B1:=L1*(a1-L2*a2)/(L1-L2):
> A2:=(L1*a2-a1)/(L1-L2):
> B2:=(a1-L2*a2)/(L1-L2):
> a:=sqrt(abs(B1/A1)): b:=sqrt(abs(B2/A2)):

# We consider the following six cases, since the reducing transformations depend on the coefficients of the polynomials, thus on the sign combinations of the now calculated constants A1, B1, A2, B2. For each of the six cases we obtain the elliptic coordinate xi as a function of tau.
# a) 
> if evalf(A1)>0 and evalf(B1)>0 and evalf(A2)>0 and evalf(B2)>0 then
>      if evalf(a)<evalf(b) then
>          a_:=a: b_:=b 
>        else
>          a_:=b: b_:=a:
>       fi:
>      k:=sqrt((b_^2-a_^2)/(b_^2)):
>      u:=-(alpha-beta)*sqrt(A1*A2)*b_*tau+z1:
>      xi:=(beta*b_*JacobiCN(u,k)/JacobiSN(u,k)-alpha)/(b_*JacobiCN(u,k)/ JacobiSN(u,k)-1):
>      #plot(xi,tau=-10..10):
>    fi:
# b) 
> if evalf(A1)>0 and evalf(B1)<0 and evalf(A2)>0 and evalf(B2)>0 then
>     a_:=a: b_:=b: 
>     k:=sqrt((b_^2)/(a_^2+b_^2)):
>     u:=(alpha-beta)*sqrt(A1*A2)*sqrt(a_^2+b_^2)*tau+z1:
>     xi:=(beta*a_*1/JacobiCN(u,k)-alpha)/(a_/JacobiCN(u,k)-1):                      #plot(xi,tau=-10..10):
>    fi:
# c) 
> if evalf(A1)<0 and evalf(B1)>0 and evalf(A2)>0 and evalf(B2)>0 then
>      a_:=a: b_:=b: 
>      k:=sqrt(a_^2/(a_^2+b_^2)):
>      u:=-(alpha-beta)*sqrt(abs(A1)*A2)*sqrt(a_^2+b_^2)*tau+z1:
>      xi:=(beta*a_*JacobiCN(u,k)-alpha)/(a_*JacobiCN(u,k)-1):
>      #plot(xi,tau=-10..10):
>   fi:
# d) 
> if evalf(A1)>0 and evalf(B1)<0 and evalf(A2)>0 and evalf(B2)<0 then
>      if evalf(a)<evalf(b) then
>          a_:=a: b_:=b 
>        else
>          a_:=b: b_:=a:
>       fi:
>      k:=sqrt((a_^2)/(b_^2)):
>      u:=-(alpha-beta)*sqrt(A1*A2)*b_*tau+z1:
>      xi:=((beta*b_)/JacobiSN(u,k)-alpha)/(b_/JacobiSN(u,k)-1):
>      #plot(xi,tau=-10..10):
>   fi:
# e) 
> if evalf(A1)>0 and evalf(B1)<0 and evalf(A2)<0 and evalf(B2)>0 then
>      a_:=a: b_:=b: 
>      k:=sqrt((b_^2-a_^2)/(b_^2)):
>      u:=-(alpha-beta)*sqrt(A1*abs(A2))*b_*tau+z1:
>      xi:=(beta*sqrt(b_^2-(b_^2-a_^2)*(JacobiSN(u,k))^2)-alpha)/(sqrt(b_^2-(b_^2-a_^2)*(JacobiSN(u,k))^2)-1):
>      #plot(xi,tau=-10..10):
>   fi:
# f) 
> if evalf(A1)<0 and evalf(B1)>0 and evalf(A2)<0 and evalf(B2)>0 then
>      if evalf(a)<evalf(b) then
>          a_:=a: b_:=b 
>        else
>          a_:=b: b_:=a:
>      fi:
>      k:=sqrt((a_^2)/(b_^2)):
>      u:=(alpha-beta)*sqrt(abs(A1*A2))*b_*tau+z1:
>      xi:=(beta*a_*JacobiSN(u,k)-alpha)/(a_*JacobiSN(u,k)-1):
>      #plot(xi,tau=-10..10):
>   fi:
# Analogously for the polynomial in eta.
> eta[1]:=-1:eta[2]:=1:eta[3]:=evalf((-(1-m)+sqrt((1-m)^2+4*H*alpha1))/(2*H)):eta[4]:=evalf((-(1-m)-sqrt((1-m)^2+4*H*alpha1))/(2*H)):
# Since in this case the polynomial may have complex roots, let us control their nature.
> reale:=is(eta[3],real):
# If the roots are real, they must not interlace. Let us control that and in case consider the two polynomials obtained as products of the bynomials with non interlacing roots
> if reale=true then
>   INTER2:=sort([eta[1],eta[2],eta[3],eta[4]]):
>    if eta[3]>-1 and eta[4]<1 and eta1>eta[4] then
>       p1:=expand((eta-INTER2[1])*(eta-INTER2[2])):
>       p2:=expand(H*(eta-INTER2[3])*(eta-INTER2[4])):
>    else
>       p1:=expand(H*(eta-INTER2[1])*(eta-INTER2[2])):
>       p2:=expand((eta-INTER2[3])*(eta-INTER2[4])):
>    fi:
> else
>   p1:=expand(H*(eta-eta[1])*(eta-eta[2])):
>   p2:=expand((eta-eta[3])*(eta-eta[4])):
> fi:
> p1:p2:
# As before, let us consider the coefficients of these polynomials and calculate the constants for the reducing transformation 
> a11:=Re(coeff(p1,eta,2)): b11:=Re(coeff(p1,eta,1)/2): c11:=Re(coeff(p1,eta,0)):
> a22:=Re(coeff(p2,eta,2)): b22:=Re(coeff(p2,eta,1)/2): c22:=Re(coeff(p2,eta,0)):
> if evalf(b11)=0 and evalf(b22)=0 then
>    A11:=a11:B11:=c11:A22:=a22:B22:=c22:alpha2:=0
> else
>    L11:=(-(a11*c22+a22*c11-2*b11*b22)+sqrt((a11*c22+a22*c11-2*b11*b22)^2-4*(b22^2-a22*c22)*(b11^2-a11*c11)))/      (2*(b22^2-a22*c22)):
>    L22:=(-(a11*c22+a22*c11-2*b11*b22)-sqrt((a11*c22+a22*c11-2*b11*b22)^2-4*(b22^2-a22*c22)*(b11^2-a11*c11)))/(2*(b22^2-a22*c22)):
>    alpha2:=(L11*b22-b11)/(a11-L11*a22):  
>    beta2:=(L22*b22-b11)/(a11-L22*a22):
>    A11:=L11*(L11*a22-a11)/(L11-L22)+a11-L11*a22:
>    B11:=L11*(a11-L22*a22)/(L11-L22):
>    A22:=(L11*a22-a11)/(L11-L22):
>    B22:=(a11-L22*a22)/(L11-L22):
> fi:
> a0:=sqrt(abs(B11/A11)): b0:=sqrt(abs(B22/A22)):
# As before we have six cases, but with two subcases. Afterwards we obtain eta as a function of tau.
# a) 
> if evalf(A11)>0 and evalf(B11)>0 and evalf(A22)>0 and evalf(B22)>0 then
>      if evalf(a0)<evalf(b0) then
>          a0_:=a0: b0_:=b0 
>       else
>          a0_:=b0: b0_:=a0:
>      fi:
>      kappa:=sqrt((b0_^2-a0_^2)/(b0_^2)):
>      nu:=(alpha2-beta2)*sqrt(A11*A22)*b0_*tau+z2:
>      eta:=(beta2*b0_*JacobiCN(nu,kappa)/JacobiSN(nu,kappa)-alpha2)/(b0_*JacobiCN(nu,kappa)/JacobiSN(nu,kappa)-1):
>      #plot(eta,tau=-10..10):
>    fi:
# b) 
> if evalf(A11)>0 and evalf(B11)<0 and evalf(A22)>0 and evalf(B22)>0 then
>     a0_:=a0: b0_:=b0: 
>     kappa:=sqrt(b0_^2/(a0_^2+b0_^2)):
>     nu:=-(alpha2-beta2)*sqrt(A11*A22)*sqrt(a0_^2+b0_^2)*tau+z2:
>     eta:=((beta2*a0_)/JacobiCN(nu,kappa)-alpha2)/(a0_/JacobiCN(nu,kappa)-1):
>     #plot(eta,tau=-10..10):
>    fi:
# c1) 
> if evalf(A11)<0 and evalf(B11)>0 and evalf(A22)>0 and evalf(B22)>0 and evalf(alpha2)<>0 then
>      a0_:=a0: b0_:=b0: 
>      kappa:=sqrt(a0_^2/(a0_^2+b0_^2)):
>      nu:=(alpha2-beta2)*sqrt(abs(A11)*A22)*sqrt(a0_^2+b0_^2)*tau+z2:
>      eta:=(beta2*a0_*JacobiCN(nu,kappa)-alpha2)/(a0_*JacobiCN(nu,kappa)-1):
>      #plot(eta,tau=-10..10):
>    fi:
# c2) 
> if evalf(A11)<0 and evalf(B11)>0 and evalf(A22)>0 and evalf(B22)>0 and evalf(alpha2)=0 then
>      a0_:=a0: b0_:=b0: 
>      kappa:=sqrt(a0_^2/(a0_^2+b0_^2)):
>      nu:=sqrt(abs(A11)*A22)*sqrt(a0_^2+b0_^2)*tau+z2:
>      eta:=a0_*JacobiCN(nu,kappa):
>      #plot(eta,tau=-10..10):
>    fi:
# d) 
> if evalf(A11)>0 and evalf(B11)<0 and evalf(A22)>0 and evalf(B22)<0 then
>      if evalf(a0)<evalf(b0) then
>          a0_:=a0: b0_:=b0 
>       else
>          a0_:=b0: b0_:=a0:
>       fi:
>       kappa:=sqrt((a0_^2)/(b0_^2)):
>       nu:=(alpha2-beta2)*sqrt(A11*A22)*b0_*tau+z2:
>       eta:=((beta2*b0_)/JacobiSN(nu,kappa)-alpha2)/(b0_/JacobiSN(nu,kappa)-1):
>       #plot(eta,tau=-10..10):
>    fi:
# e1) 
> if evalf(A11)>0 and evalf(B11)<0 and evalf(A22)<0 and evalf(B22)>0 and H<0 then
>      a0_:=a0: b0_:=b0: 
>      kappa:=sqrt((b0_^2-a0_^2)/(b0_^2)):
>      nu:=(alpha2-beta2)*sqrt(A11*abs(A22))*b0_*tau+z2:
>      eta:=(beta2*sqrt((b0_^2)-(b0_^2-a0_^2)*(JacobiSN(nu,kappa))^2)-alpha2)/(sqrt((b0_^2)-(b0_^2-a0_^2)*(JacobiSN        (nu,kappa))^2)-1):
>      #plot(eta,tau=-10..10):
>    fi:
# e2)
> if evalf(A11)>0 and evalf(B11)<0 and evalf(A22)<0 and evalf(B22)>0 and H>0 then
>      a0_:=a0: b0_:=b0: 
>      kappa:=sqrt((b0_^2-a0_^2)/(b0_^2)):
>      nu:=(alpha2-beta2)*sqrt(A11*abs(A22))*b0_*tau+z2:
>      eta:=(-beta2*sqrt((b0_^2)-(b0_^2-a0_^2)*(JacobiSN(nu,kappa))^2)-alpha2)/(-sqrt((b0_^2)-(b0_^2-a0_^2)*(JacobiSN      (nu,kappa))^2)-1):
>      #plot(eta,tau=-10..10):
>    fi:
# f)
> if evalf(A11)<0 and evalf(B11)>0 and evalf(A22)<0 and evalf(B22)>0 then
>      if evalf(a0)<evalf(b0) then
>          a0_:=a0: b0_:=b0 
>      else
>          a0_:=b0: b0_:=a0:
>      fi:
>      kappa:=sqrt((a0_^2)/(b0_^2)):
>      nu:=-(alpha2-beta2)*sqrt(abs(A11*A22))*b0_*tau+z2:
>      eta:=(beta2*a0_*JacobiSN(nu,kappa)-alpha2)/(a0_*JacobiSN(nu,kappa)-1):
>      #plot(eta,tau=-10..10):
>   fi:
# Let us calculate the two integration constants z1 and z2, taking into account the initial conditions at tau=0.
> xiA:=subs(tau=0,xi):
> z11_:=solve(xi1=xiA,z1): if H>0 then z11:=z11_[2] else z11:=z11_ end if:
> etaA:=subs(tau=0,eta):
> z22_:=solve(eta1=etaA,z2): if H>0 then z22:=z22_[2] else z22:=z22_ end if:
> xib:=subs(z1=z11,xi):
> dxib:=diff(xib,tau):
> dxib0:=evalf(subs(tau=0,dxib)):
# The sign of this must be equal to that of the initial value of v[XI].
> segno1:=sign(v[XI]*dxib0):
> xi:=subs(tau=segno1*tau,xib):
# Analogously for eta.
> etab:=subs(z2=z22,eta):
> detab:=diff(etab,tau):
> detab0:=evalf(subs(tau=0,detab)):
# The sign of this must be equal to that of the initial value of v[ETA].
> segno2:=sign(v[ETA]*detab0):
> eta:=subs(tau=segno2*tau,etab):
# Lastly, taking into account the definition of the elliptic coordinates let us calculate the Cartesian coordinates x and y as functions of tau.
> if x>0 then x:=tau->sqrt((xi^2-1)*(1-eta^2)):else x:=tau->-sqrt((xi^2-1)*(1-eta^2)):fi:
> x(tau):
> y:=tau->xi*eta+1:
> y(tau):
# Now we must display the orbit avoiding (almost always) the "rebound" due to the definition of x with a square root. The following writes the list of the points to drawn.
> dis:=plot([x(tau),y(tau),tau=0..delta],numpoints=n):
> 
# The following removes all the "words" and leaves the list of pairs of numbers.
> Q:=op([1,1],dis):
# With the following, only the first coordinates of the list (i.e. the x's) are considered.
> 
;
> with(LinearAlgebra):rowQ:=RowDimension(Q):
> P:=Q[1..rowQ,1]:
# Let us write also the second coordinates of the list Q.
> W:=Q[1..rowQ,2]:
> 
;
# Let us write the list of the distances of the points from the origin and find the minimum value.
#  
> M:=[seq(sqrt((P[h])^2+(W[h])^2),h=1..rowQ)]:
> min(op(M)):
# Let us change the signs to avoid the "rebound".
> for i from 1 to (rowQ-2) do if  abs(P[i])>abs(P[i+1]) and abs(P[i+1])<abs(P[i+2]) and (sqrt((P[i+1])^2+(W[i+1])^2))>(min(op(M))) then R:=<P[i+2..rowQ]>;S:=-R;P:=convert(<P[1..i+1],S>,Vector): end if: end do:
# 
# Reconstruct the list.
> for j from 1 to rowQ do A[j]:=[P[j],W[j]] od:
> fine:=[seq(A[k],k=1..rowQ)]:
> curva:=PLOT(CURVES(fine,COLOUR(RGB,1.0,0,0)),AXESLABELS(``, ``),VIEW(DEFAULT,DEFAULT),SCALING(CONSTRAINED)):
# Plot two small disks in the two points where are the two attractive masses.
> with(plottools):
> d1 := disk([0,0], 0.06, color=black):
> d2 := disk([0,2], 0.06*root(m,3), color=black):
> plots[display]({curva,d1,d2});

# 
# *************************************************************************************************************************************
# The total energy is
> Total_Energy:=H;
                 Total_Energy := -0.5036067990

# 
# The other first integral of the problem is
> First_Integral_gamma:=-alpha1;
             First_Integral_gamma := -0.6636067942

# 
# The evaluated point number is
> Evaluated_Point_Number:=rowQ;
                 Evaluated_Point_Number := 555

# 
# 
# 
# **************************************************************************************************************************************
# 
